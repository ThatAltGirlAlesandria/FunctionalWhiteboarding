Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.
Example
Input: "aaabccdddda"
Output: "3ab2c4da"


Solution in JavaScript: //Without Recursion 

function compressString(string)
  if(string.length ===1){
  return string;
  }
    let count = 1;
    let current = string[0];
      for (let i= 0; i < string.length; i++)
        if ( string[i] === current) {
        count += 1;
          } else {
            if (count >1) {
      
        return `${count}${current}` +compressString(string.slice(i));
          } else {

      return current + compressString(string.slice(i));
  }
}

if (count >1) {
return `${count}${compress}`;
} else {
return current;
}


Optimized: 
function compressString(string) {
  let compressed = '';
  let count = 1;

  for (let i = 0; i < string.length; i++) {
    if (string[i] === string[i + 1]) {
      count++;
    } else {
      compressed += `${string[i]}${count > 1 ? count : ''}`;
      count = 1;
    }
  }

  return compressed.length < string.length ? compressed : string;
}



Solution in JavaScript: //With Recursion
function compressStringRecursive(string, index = 0, compressed = '', count = 1) {
  if (index === string.length) {
    return compressed.length > string.length ? compressed : string;
  }
  
  if (string[index] === string[index + 1]) {
    count++;
  } else {
    compressed += `${string[index]}${count > 1 ? count : ''}`;
    count = 1;
  }
  
  return compressStringRecursive(string, index + 1, compressed, count);
}

const inputString = "aaabbbcccdd";
const result = compressStringRecursive(inputString);
console.log(result);


Solution in C#: //Without Recursion
using System;
class Program
{
  static string CompressString(string input)
  {
     string compressed = "";
      int count = 1;
      for (int i = 0; i < input.Length; i++)
      {
        if (i < input.Length - 1 && input[i] == input[i + 1])
         {
           count++;
          }
          else
          {
          compressed += $"{input[i]}{count > 1 ? count.ToString() : ""}";
          count = 1;
          }
        }
        
      return compressed.Length > input.Length ? compressed : input;
    }

    static void Main()
    {
        string inputString = "aaabbbcccdd";
        string result = CompressString(inputString);
        Console.WriteLine(result);
    }
}


Solution in C#: //With Recursion
using System;

class Program
{
  static string CompressStringRecursive(string input, int index = 0, string compressed = "", int count = 1)
    {
        if (index == input.Length)
        {
            return compressed.Length > input.Length ? compressed : input;
        }
        if (index < input.Length - 1 && input[index] == input[index + 1])
        {
            count++;
        }
        else
        {
            compressed += $"{input[index]}{count > 1 ? count.ToString() : ""}";
            count = 1;
        }

        return CompressStringRecursive(input, index + 1, compressed, count);
    }

    static void Main()
    {
        string inputString = "aaabbbcccdd";
        string result = CompressStringRecursive(inputString);
        Console.WriteLine(result);
    }
}

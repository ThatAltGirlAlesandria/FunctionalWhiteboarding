Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Input: [7, 9, "hi", 12, "hi", 7, 53]
Output: [7, 9, "hi", 12, 53]


Solution in JavaScript: //Without Recursion
const removeDuplicates = (inputArray) => {
  if (!Array.isArray(inputArray)) {
    return "Please enter an array";
  }
  
  return inputArray.filter((item, index) => inputArray.indexOf(item) === index);
};


const inputArray = [7, 9, "hi", 7, 12, "hi", 53];
const result = removeDuplicates(inputArray);
console.log(result);


Solution in C#: //Without Recursion
using System;
using System.Collections.Generic;
class Program
{
    static List<T> RemoveDuplicates<T>(List<T> inputList)
    {
        if (inputList == null)
        {
            Console.WriteLine("Please enter a valid list.");
            return new List<T>();
        }
        List<T> result = new List<T>();
        HashSet<T> uniqueElements = new HashSet<T>();
        foreach (T item in inputList)
        {
            if (uniqueElements.Add(item))
            {
                result.Add(item);
            }
        }
        return result;
    }
    static void Main()
    {
        List<object> inputList = new List<object> { 7, 9, "hi", 7, 12, "hi", 53 };
        List<object> result = RemoveDuplicates(inputList);
        foreach (var item in result)
        {
            Console.WriteLine(item);
        }
    }
}


Solution in JavaScript: //With Recursion
const removeDuplicates = (inputArray, index = 0, resultArray = []) => {
  if (!Array.isArray(inputArray)) {
    return "Please enter an array";
  }
  if (index === inputArray.length) {
    return resultArray;
  }
  const currentItem = inputArray[index];
  if (!resultArray.includes(currentItem)) {
    resultArray.push(currentItem);
  }
  return removeDuplicates(inputArray, index + 1, resultArray);
};
const inputArray = [7, 9, "hi", 7, 12, "hi", 53];
const result = removeDuplicates(inputArray);
console.log(result);


Solution in C#: //With Recursion
using System;
using System.Collections.Generic;


class Program
{
    static List<T> RemoveDuplicatesRecursively<T>(List<T> inputList, int index = 0, HashSet<T> uniqueElements = null)
    {
        if (inputList == null)
        {
            Console.WriteLine("Please enter a valid list.");
            return new List<T>();
        }
        if (index == inputList.Count)
        {
            return new List<T>();
        }
        if (uniqueElements == null)
        {
            uniqueElements = new HashSet<T>();
        }
        T item = inputList[index];
        if (uniqueElements.Add(item))
        {
            List<T> rest = RemoveDuplicatesRecursively(inputList, index + 1, uniqueElements);
            rest.Insert(0, item);
            return rest;
        }
        else
        {
            return RemoveDuplicatesRecursively(inputList, index + 1, uniqueElements);
        }
    }
    static void Main()
    {
        List<object> inputList = new List<object> { 7, 9, "hi", 7, 12, "hi", 53 };
        List<object> result = RemoveDuplicatesRecursively(inputList);   
        foreach (var item in result)
        {
            Console.WriteLine(item);
        }
    }
}